# import des commandes blender dans python

"""sys.path.append("D:/PC/Documents/Blender")
from utils.ShapeGrammarTools import * 
from utils.MaterialTools import * """

import  bpy
import random
import functools
from math import *
import os

#Cr√©ation textures

realpath = os.path.expanduser("D:/PC/Documents/GitHub/CityGenerator/Textures/road.jpg")
try:
    img = bpy.data.images.load(realpath)
except:
    raise NameError("Cannot load image %s" % realpath)
    
roadImg = bpy.data.textures.new('ImageText', type = 'IMAGE')
roadImg.image = img

roadMat = bpy.data.materials.new('TexMat')
roadMat.diffuse_shader = 'LAMBERT'  

mtex = roadMat.texture_slots.add()
mtex.texture = roadImg
mtex.texture_coords = 'UV'
mtex.use_map_color_diffuse = True 
mtex.use_map_color_emission = True
mtex.emission_color_factor = 0.5
mtex.use_map_density = True 
mtex.mapping = 'FLAT' 

#

def makeMaterial(name, diffuse, specular, alpha):
    mat = bpy.data.materials.new(name)
    mat.diffuse_color = diffuse
    mat.diffuse_shader = 'LAMBERT' 
    mat.diffuse_intensity = 1.0 
    mat.specular_color = specular
    mat.specular_shader = 'COOKTORR'
    mat.specular_intensity = 0.5
    mat.alpha = alpha
    mat.ambient = 1
    return mat
 
def setMaterial(ob, mat):
    me = ob.data
    me.materials.append(mat)

class Vector:

    def __init__(self,x=0,y=0,z=0):
        self.x=x
        self.y=y
        self.z=z

    def fromPoint(p1,p2,norm=False):
        x=p2.x-p1.x
        y=p2.y-p1.y
        z=p2.z-p1.z
        if norm:
            n=p1.norme(p2)
            x/=n
            y/=n
            z/=n
        return Vector(x,y,z)

    def myprint(self):
        print("x=",self.x," y=",self.y," z=",self.z)

    def __add__(self, vB):
        return Vector(self.x+vB.x,self.y+vB.y,self.z+vB.z) 
    
    def __sub__(self, vB):
        return Vector(self.x-vB.x,self.y-vB.y,self.z-vB.z) 
    
    def __mul__(self, c): 
        if isinstance(c,Vector):
            return  self.x*c.x+self.y*c.y+self.z*c.z  
        else:
            return Vector(c*self.x,c*self.y,c*self.z) 
        
    def __div__(self, c):
        return Vector(self.x/c, self.y/c,self.z/c)
    
    def angle2D(self):
        nb = self.y/self.x
        if nb<0: return (atan(nb))+3.14159
        else: return (atan(nb))
        
    def angle2DVector(self,v):
        return abs(self.angle2D()-v.angle2D())

class Point:
    def __init__(self,x=0,y=0,z=0):
        self.x=x
        self.y=y
        self.z=z
        
    def print(self):
        print("x=",self.x," y=",self.y," z=",self.z)
        
    def cp(self,inv=False):
        if inv:
            return (Point(self.y,self.x,self.z))
        else:
            return (Point(self.x,self.y,self.z))
        
    def norme(self,p):
        return sqrt((p.x-self.x)**2+(p.y-self.y)**2+(p.z-self.z)**2)
    
    def tuple(self):
        return (self.x,self.y,self.z)
    
class Cercle:
    
    def __init__(self,p,r):
        self.point=p
        self.rayon=r
        
    def intersectionDroite(self,dr):
        
        a=dr.a**2+1
        b=2*self.point.x+2*-dr.a*(dr.d-self.point.y)
        c=(self.point.x)**2+(dr.d-self.point.y)**2-self.rayon**2
        
        delta=b**2-4*a*c
        if delta<=0:
            return False
        rac=sqrt(delta)
        
        p1=Point((b-rac)/(2*a),0,0)
        p2=Point((b+rac)/(2*a),0,0)
        
        if p2.x>p1.x:
            p1=p2
            
        p1.y=dr.getY(p1.x)
        
        return p1
        
class Droite:
    
    def __init__(self,p1,p2):
        
        self.p1=p1
        self.p2=p2
        if self.p1.x>self.p2.x:
            self.p1,self.p2=self.p2,self.p1
        self.vector = Vector.fromPoint(self.p1,self.p2)
        if self.p1.x-self.p2.x==0:
            self.a=0
        else :
            self.a=(self.p1.y-self.p2.y)/(self.p1.x-self.p2.x)
        self.d=self.p1.y-self.a*self.p1.x
        
        
    def getY(self,x):
        return self.a*x+self.d
    
    def normePoint(self,p):
        X=-(self.p2.x-self.p1.x)
        Y=-(self.p2.y-self.p1.y)
        Z=p.x*-X+p.y*-Y
        
        proj=Point()
        proj.x=-(self.d*Y+Z)/(X+Y*self.a)
        proj.y=self.a*proj.x+self.d
        
        return p.norme(proj)
   
    def projPoint(self,p):
        X=-(self.p2.x-self.p1.x)
        Y=-(self.p2.y-self.p1.y)
        Z=p.x*-X+p.y*-Y
        
        proj=Point()
        proj.x=-(self.d*Y+Z)/(X+Y*self.a)
        proj.y=self.a*proj.x+self.d
        
        return proj
    
    def norme(self):
        return self.p1.norme(self.p2)
    
    def intersect(self,d):
        u=((self.p2.x-self.p1.x)*(d.p1.y-self.p1.y)-(d.p1.x-self.p1.x)*(self.p2.y-self.p1.y))/((d.p2.x-d.p1.x)*(self.p2.y-self.p1.y)-(self.p2.x-self.p1.x)*(d.p2.y-d.p1.y))
        
        if u<0 or u>1:
            return False
        p = Point()
        p.x=d.p1.x+u*(d.p2.x-d.p1.x)
        p.y=d.p1.y+u*(d.p2.y-d.p1.y)
        return p
    
    def milieu(self):
        x = self.p1.x+(abs(self.p1.x-self.p2.x)/2)
        y = self.a*x+self.d
        
        return Point(x,y,0)
    

class Plate:
    MIN=1
    NORMAL=0
    ROAD=2
    def __init__(self, p1=Point(),p2=Point(),p3=Point(),p4=Point(),type=NORMAL):
        self.points = [p1,p2,p3,p4]
        self.sens=True
        self.type=type
    
    def setPoint(self,index,p):
        if index>-1 and index<4:
            self.points[index] = p
            
    def divide(self,espace=0):
        #divide
        newPlate = Plate()
        road = Plate()#type=Plate.ROAD)
        newPlate.points = self.points[:]
        p = []
        dr = []
        rp=[]
        if self.aire()<10:
            print("test aire")
            return [[self],False]
        
        if self.sens:
            dr.append(Droite(self.points[0].cp(),self.points[1].cp()))
            dr.append(Droite(self.points[2].cp(),self.points[3].cp()))
        else:
            dr.append(Droite(self.points[0].cp(True),self.points[2].cp(True)))
            dr.append(Droite(self.points[1].cp(True),self.points[3].cp(True)))
        
        for i in range(0,2):
            r = Point(random.uniform(dr[i].p1.x+espace,dr[i].p2.x-(espace*2)),0,0)
            r.y=dr[i].getY(r.x)
            rp.append(r)
                
        coupe=Droite(rp[0],rp[1])
        
        for i in range(0,2):
            j=1
            if i==1: j=0
            
            if dr[i].norme()<espace*2 or dr[j].norme()<espace*2 :
                print("to small")
                return [[self],False]
            
            angle=sin(coupe.vector.angle2DVector(dr[i].vector))
            ecart = espace/angle
            c = Cercle(rp[i],ecart)
            intersect = c.intersectionDroite(dr[i])
            p.append(rp[i].cp(not self.sens))
            p.append(intersect.cp(not self.sens))
            
        if self.sens:
            
            self.points[1]=p[0]
            self.points[3]=p[2]
            newPlate.points[0]=p[1]
            newPlate.points[2]=p[3]
            
            """road.points[1]=p[0]
            road.points[3]=p[2]
            road.points[0]=p[1]
            road.points[2]=p[3]"""
            
            for i in range(0,4):
                road.points[i]=p[i]
        else:
            self.points[2]=p[0]
            self.points[3]=p[2]
            newPlate.points[0]=p[1]
            newPlate.points[1]=p[3]
            
            road.points[0]=p[2]
            road.points[1]=p[3]
            road.points[2]=p[0]
            road.points[3]=p[1]
            
        
        
        self.sens=not self.sens
        newPlate.sens=self.sens
        
        return [[self,newPlate],[road]]
    
    def draw(self):
        bpy.ops.mesh.primitive_plane_add(location=(0,0,0))
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.uv.smart_project()
        bpy.ops.object.mode_set(mode='OBJECT')
        
        obj=bpy.context.object
        if self.type==Plate.ROAD:
            setMaterial(obj,roadMat)
            
        for i in range(0,4):
            obj.data.vertices[i].co.x=self.points[i].x
            obj.data.vertices[i].co.y=self.points[i].y
            obj.data.vertices[i].co.z=self.points[i].z
        return obj
        
    def aire(self):
        d=Droite(self.points[0],self.points[3])
        p1 = d.projPoint(self.points[1])
        p2= d.projPoint(self.points[2])
        a1 = p1.norme(self.points[1])*p1.norme(self.points[0])/2
        a2= p1.norme(self.points[1])*p1.norme(self.points[3])/2
        a3 = p2.norme(self.points[2])*p2.norme(self.points[0])/2
        a4= p2.norme(self.points[2])*p2.norme(self.points[3])/2
        
        if p1.x<self.points[0].x:
            a1=-a1
        if p1.x>self.points[3].x:
            a2=-a2
        if p2.x<self.points[0].x:
            a3=-a3
        if p2.x>self.points[3].x:
            a4=-a4

        return a1+a2+a3+a4
    
    def to3D(self):
        d1 = Droite(self.points[2],self.points[0])
        d2 = Droite(self.points[2],self.points[3])
        d3 = Droite(self.points[3],self.points[1])
        d4 = Droite(self.points[0],self.points[1])
        p1=d1.milieu()
        p2=d2.milieu()
        p3=d3.milieu()
        p4=d4.milieu()
        d5 = Droite(p1,p3)
        d6 = Droite(p2,p4)
        p=d5.intersect(d6)
        if p!=False:
            
            p.z+=.05
            bpy.ops.mesh.primitive_cube_add(radius=.3,location=p.tuple())
            obj=bpy.context.object
            
            angle = d4.vector.angle2D()
            obj.rotation_euler[2]=angle
            
            
            
            

class Map2D:
    
    def __init__(self):
        self.plates = []
        self.road = []
        
    def perform(self, n=1):
        self.plates = [Plate(Point(0,0,0),Point(20,0,0),Point(0,20,0),Point(20,20,0))]
        for i in range(0,n):
            newPlates = []
            for j in range(0,len(self.plates)):
                res = self.plates[j].divide(.2)
                newPlates+=res[0]
                if res[1]!=False:
                    self.road+=res[1]
            self.plates=newPlates
        for i in range(0,len(self.plates)):
            self.plates[i].draw()
        for i in range(0,len(self.road)):
            self.road[i].draw()
            
    def to3D(self):
        for p in self.plates:
            p.to3D()
        

print('///////////')
m = Map2D()
m.perform(5)

m.to3D()




#setMaterial(obj,mat)


